/**
 * READERTHREAD - General Reader Thread
 *
 * The general reader thread will read
 * content from the input stream then
 * pass the processing data to handler.
 */
#pragma once

#include "thread.h"
#include "platform.h"
#include "protocol.h"
#include "apiException.h"
#include "stream.h"

#include <memory>

namespace api {

template <typename T>
class ReaderHandler {
public:
	virtual void handleData(T*) = 0;

	virtual void handleError(ApiException) = 0;
};

template <typename T>
class AsyncReadHandler : public Runnable {
	ReaderHandler<T>& handler;
	std::auto_ptr<T> data;
public:
	AsyncReadHandler(ReaderHandler<T>& _handler, T* _data):
		handler(_handler), data(_data) {}

	virtual ~AsyncReadHandler() {}

	virtual void run() {
		handler.handleData(data.get());
	}
};

template <typename T>
class ReaderThread : public Runnable {
	Protocol<T>& protocol;
	Platform& platform;
	InputStream& inputStream;
	ReaderHandler<T>& handler;
public:

	ReaderThread(Platform& _platform, InputStream& _inputStream, 
		Protocol<T>& _protocol, ReaderHandler<T>& _handler):
		platform(_platform), inputStream(_inputStream),
		protocol(_protocol), handler(_handler) {}

	virtual void run() {
		// To stop it, you could only use api::Thread::kill()
		while(1) {
			try {
				T* something = protocol.receive(inputStream);
				platform.newThread(
					new AsyncReadHandler<T>(handler, something), true) -> detach();
			}
			catch(ApiException e) {
				handler.handleError(e);
			}
		}
	}
};

};
