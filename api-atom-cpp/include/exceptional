/*
 * EXCEPTIONAL - Exceptional Monad
 *
 * For returning result with possible exception.
 * When invoke some routine with exceptional 
 * return value, you ought to check whether there's
 * some exception first, then decide whether to
 * collapse the stack or just handle the exception.
 *
 * When you want to return a result barely, just
 * return the result and this class will cast the
 * result for you. Otherwise when you want to use
 * the exception, you could either call the 
 * throwException function or invoke the explicit 
 * constructor.
 */

/**
 * @@@@@@@@@@@@@@@@ WARNING @@@@@@@@@@@@@@@@@@@@@
 * When the return type is void, the generated
 * type would be _EX(void*), which means you should
 * return NULL or it may cause memory corruption!
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 */

#pragma once

#include "apiException.h"
#include <string>

namespace api {

template<typename T>
class exceptional {
public:
	const bool abnormal;
	const ApiException exception;
	const T value;

	exceptional(T data): 
		value(data),
		abnormal(false) {}
	
	exceptional(ApiException _exception, T data = 0):
		exception(_exception), 
		value(data),
		abnormal(true) {}
};

#define _EX(T) api::exceptional< T >

#define throwException(message)\
	return ApiException(message);

#define catchException(id, phrase)\
	if(id.abnormal) { phrase; }

#define checkException(id)\
	catchException(id, return id.exception)

#define tryException(T, id, expression)\
	_EX(T) id = (expression);\
	checkException(id);

#define tryCatchException(T, id, expression, phrase)\
	_EX(T) id = (expression);\
	catchException(id, phrase);

#define tryAssign(T, target, id, expression) {\
	tryException(T, id##_except, expression);\
	target = id##_except.value;\
}

#define tryDeclare(T, id, expression)\
	tryException(T, id##_except, expression);\
	T id = id##_except.value;

};
