#pragma once

#include "protocol.h"
#include <monitorQueue>
#include <memory>

namespace api {

template<typename T>
class WriterHandler {
public:
	virtual void handleError(T*, ApiException) = 0;
};

template<typename T>
class WriterThread : public Runnable {
	Protocol<T>& protocol;
	OutputStream& outputStream;
	WriterHandler<T>& writerHandler;
	MonitorQueue<T*>& monitorQueue;
public:
	WriterThread(Protocol<T>& _ptcl, OutputStream& _o,
		WriterHandler<T>& _wr, MonitorQueue<T*>& _q):
		protocol(_ptcl), outputStream(_o), 
		writerHandler(_wr), monitorQueue(_q) {}

	virtual void run() {
		// Can only be terminated by api::Thread::kill().
		while(1) {
			std::auto_ptr<T> data(monitorQueue.remove());
			try {
				protocol.transfer(data.get(), outputStream);	
			}
			catch(ApiException e) {
				writerHandler.handleError(data.get(), e);
			}
		}
	}
};

};
