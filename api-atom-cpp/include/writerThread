#pragma once

#include "protocol.h"
#include <monitorQueue>

namespace api {

template<typename T>
class WriterHandler {
public:
	virtual void handleError(T*, ApiException) = 0;
};

template<typename T>
class WriterThread : public Runnable {
	Protocol<T>& protocol;
	OutputStream& outputStream;
	WriterHandler<T>& writerHandler;
	MonitorQueue<T*>& monitorQueue;
public:
	WriterThread(Protocol<T>& _ptcl, OutputStream& _o,
		WriterHandler<T>& _wr, MonitorQueue<T*>& _q):
		protocol(_ptcl), outputStream(_o), 
		writerHandler(_wr), monitorQueue(_q) {}

	virtual void run() {
		// Can only be terminated by api::Thread::kill().
		while(1) {
			T* data = monitorQueue.remove();

			// Please set nil of queue to NULL.
			if(data == NULL) return;	

			_EX(void*) transferMonad = 
				protocol.transfer(data, outputStream);
			outputStream.flush();

			if(transferMonad.abnormal) 
				writerHandler.handleError(data, transferMonad.exception);
			delete data;
		}
	}
};

};
