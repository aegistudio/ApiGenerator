/**
 * APIVARIANT - variant length container.
 *
 * A variant container whose size is determined
 * at the very beginning but its content could
 * be altered via accessor method.
 *
 * Thus this class has analogous behavior as the
 * java array container.
 */
#pragma once

#include <stddef.h>

namespace api {

template<typename T>
class variant {
	T* data;
public:
	int length;

	variant(int size):
		length(size), data(
			size > 0? new T[size] : NULL) {}

	// @@@ Memory Leak Warning @@@
	// Invocation to this method will transfer
	// ownership of the data to this object,
	// and may cause double free if manage it
	// else where.
	variant(int size, T* theData):
		length(size), data(theData)
		{}

	variant(const variant<T>& copy):
		length(copy.length),
		data(new T[copy.length]) {

		if(data) {
			int index = 0;
			for(; index < length; index ++)
				data[index] = copy.data[index];
		}
	}

	virtual ~variant() {
		if(length > 0 && data) 
			delete[] data;
	}

	// Retrive the data buffer of this container.
	T* operator*() {
		return data;
	}

	// @@@ Memory Leak Warning @@@
	// This method will transfer the ownership out
	// of this object, and current object will no
	// longer own this array. So target owner should
	// handle memory correctly.
	T* transfer() {
		T* result = data;
		data = NULL;
		return result;
	}
	
	T& operator[](int index) {
		return data[index];
	}

	const T& operator[](int index) const {
		return data[index];
	}
};

};
