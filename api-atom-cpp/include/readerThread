/**
 * READERTHREAD - General Reader Thread
 *
 * The general reader thread will read
 * content from the input stream then
 * pass the processing data to handler.
 */
#pragma once

#include "thread.h"
#include "platform.h"
#include "protocol.h"
#include "apiException.h"
#include "stream.h"
#include "safeCounter.h"

#include <memory>

namespace api {

template <typename T>
class ReaderHandler {
public:
	virtual void handleData(T*) = 0;

	virtual void handleError(ApiException) = 0;
};

template <typename T>
class AsyncReadHandler : public Runnable {
	ReaderHandler<T>& handler;
	std::auto_ptr<T> data;
	SafeCounter& safeCounter;
public:
	AsyncReadHandler(ReaderHandler<T>& _handler, T* _data, SafeCounter& _safe):
		handler(_handler), data(_data), safeCounter(_safe) {}

	virtual ~AsyncReadHandler() {}

	virtual void run() {
		safeCounter.begin();
		handler.handleData(data.get());
		safeCounter.end();
	}
};

template <typename T>
class ReaderThread : public Runnable {
	Protocol<T>& protocol;
	Platform& platform;
	InputStream& inputStream;
	ReaderHandler<T>& handler;
	SafeCounter& safeCounter;
public:

	ReaderThread(Platform& _platform, InputStream& _inputStream, 
		Protocol<T>& _protocol, ReaderHandler<T>& _handler,
		SafeCounter& _safeCounter):
		platform(_platform), inputStream(_inputStream),
		protocol(_protocol), handler(_handler), 
		safeCounter(_safeCounter) {}

	virtual void run() {
		// To stop it, you could only use api::Thread::kill()
		while(1) {
			_EX(T*) someMonad = protocol.receive(inputStream);
			if(someMonad.abnormal)
				handler.handleError(someMonad.exception);
			else {
				T* something = someMonad.value;
				platform.newThread(new AsyncReadHandler<T>(
					handler, something, safeCounter), true) -> detach();
			}
		}
	}
};

};
