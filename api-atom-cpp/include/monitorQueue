/**
 * MONITORQUEUE - Monitor Queue
 *
 * A monitor queue is a monitor on a queue
 * that blocks a thread until some data 
 * was fed into the monitor.
 *
 * Please notice it should not block the
 * queue when there's some objects inside
 * the monitor queue.
 */

#pragma once
#include <queue>
#include "platform.h"
#include <memory>

namespace api {

template<typename T>
class MonitorQueue {
	std::auto_ptr<Semaphore> semaphore;
	std::auto_ptr<Semaphore> mutex;
	std::queue<T> monitoredQueue;
public:
	MonitorQueue(Platform& platform):
		semaphore(platform.newSemaphore()), 
		mutex(platform.newSemaphore()) {

		mutex -> verhogen();
	}

	virtual ~MonitorQueue() {}

	// @@@ Memory Leak Warning @@@
	// The user listening on remove
	// method should release memory!
	virtual T remove() {
		semaphore -> proberen();

		mutex -> proberen();
		T value = monitoredQueue.front(); 
		monitoredQueue.pop();
		mutex -> verhogen();

		return value;
	}

	virtual void add(T value) {
		mutex -> proberen();
		monitoredQueue.push(value);
		mutex -> verhogen();

		semaphore -> verhogen();
	}
};

};
